
---
title: "R Notebook"
output: html_notebook
---

```{r}
# load libraries
library(rtweet)
library(ggplot2)
library(dplyr)
library(tidytext)
library(tidyverse)
library(stringr) 
library(tm)
library(quanteda)
library(jsonlite)
library(glue)
library(stringr)
library(e1071)
library(caTools)
library(syuzhet)
library(lubridate)
library(scales)
library(reshape2)
library(caret)
library(rpart)
library(rpart.plot)
library(party)
library(wordcloud)
library(wordcloud2)
library(RColorBrewer)

```

```{r}
vignette("auth", package = "rtweet")
```


```{r}
# Extract data via the API
crypto_bitcoin <- search_tweets("#bitcoin", n = 110000, include_rts = FALSE, retryonratelimit = TRUE)
crypto_bitcoin

# Maximum number of tweets returned from a single token is 18,000. To return more than 18,000 tweets, we set retryonratelimit to TRUE.
```

```{r}
# Export the table as a csv table
write.csv(crypto_bitcoin,"bitcoin.csv", row.names = FALSE)
```
#Load the data
```{r}
bitcoin <- read_csv("bitcoin.csv")

```


#Contry of the tweeters represented in the dataset
```{r}
arrange(summarise(group_by(bitcoin, country), Number=n()), desc(Number))

print( "Most of the countries were the tweeters are located are not identified in the dataset, but we can believe that many countries are represented because we have 67 countries identified")

#Visualization of the top 10 countries found in the dataset
Countries <-head(arrange(summarise(group_by(bitcoin , country_code), Number=n()), desc(Number)), 11)
ggplot(Countries ,aes(x= country_code, y= Number )) +  
  labs(title=" The top 10 countries indentified ",x="Country",y ="Number of tweets")+
  geom_bar(stat="identity", fill="blue") + geom_text(aes(label= Number, vjust=-0.3))

```

```{r}
# cleaning up the data
bitcoin1 <- bitcoin %>%
    select_if(~ !any(is.na(.)))
head(bitcoin1)
```

#Considering the languages
```{r}
#Group by language
arrange(summarise(group_by(bitcoin1, lang), Number=n()), desc(Number))

print( "We have 50 languages represented in the dataset")

# visualization of the languages that figure in the dataset
Languages <-head(arrange(summarise(group_by(bitcoin1 , lang), Number=n()), desc(Number)), 5)
ggplot(Languages ,aes(x= lang, y= Number )) +  
  labs(title=" The top 5 languages indentified ",x="Language",y ="Number of tweets")+
  geom_bar(stat="identity", fill="grey") + geom_text(aes(label= Number, vjust=-0.3))
```

```{r}
# Visualization of the languages and time of the tweets
ggplot(data = bitcoin1, mapping = aes(x = created_at, y =lang)) + 
  geom_point(mapping = aes(color = lang)) + labs(title = "Tweets by languages and time " ,
x="Time", y="Languages")
```


```{r}
#Visualization of the time of creation of an account and time of creation of a tweet
ggplot(bitcoin1, mapping = aes(account_created_at/10000, created_at/10000)) +
  geom_point(mapping = aes(color = lang)) +
  labs(title = "Bitcoin Tweets",
       x = "account_created_at", y = "created_at")
```
#Considering the number of tweeters
```{r}
# Different tweeters represented in the dataset
arrange(summarise(group_by(bitcoin1,screen_name), Number=n()), desc(Number))

print( "We have 41344 different tweeters")

#Visualization of the top 5 tweeters with more tweets 
Tweeters <-head(arrange(summarise(group_by(bitcoin1 , screen_name), Number=n()), desc(Number)), 5)
ggplot(Tweeters ,aes(x= screen_name, y= Number )) +  
  labs(title=" The top 5 indentified tweeters ",x="Tweeters",y ="Number of tweets")+
  geom_bar(stat="identity", fill="lightblue") + geom_text(aes(label= Number, vjust=-0.3))

```
#Considering the number of retweets
```{r}

#Visualization of the top 10 tweeters whose post have been retweeted more
Retweets <- head(arrange (group_by(bitcoin1,retweet_count), desc(retweet_count)),50)
Retweets

#Visualization
ggplot(Retweets,aes(x= screen_name, y=retweet_count)) +  
  labs(title=" Tweeters with more retweet ",x="Tweeters",y ="Number of retweets")+
  geom_bar(stat="identity", fill="blue")+ coord_flip()
print("the 3 tweeters account with more retweets are : airdropinspect , AirdropStario and nayibbukele ")
```

#Considering number of followers
```{r}

Followers <- head(arrange(summarise(group_by(bitcoin1, screen_name), followers_count), desc(followers_count)),100)
Followers

```

```{r}
#Visualization
ggplot(head(Followers,50) ,aes(x=screen_name, y = followers_count )) +  
  labs(title=" Tweeters with more followers ",x="Tweeters",y ="Number of followers")+
  geom_bar(stat="identity", fill="blue")+ coord_flip()
print("The top 3 tweeters account with more followers are : CoinDesk, BTCTN and BitcoinMagazine")
```


###Text Analysis
```{r}
#Count Bitcoin(s) and bitcoin(s) occurances

BitcoinCount<-sum(str_detect(bitcoin1$text, "Bitcoin"))
cat("Number of tweets with 'Bitcoin':", BitcoinCount, "\n")

bitcoinCount <-sum (str_detect(bitcoin1$text, "bitcoin")) 
cat("Number of tweets with 'bitcoin':", bitcoinCount, "\n")

BitcoinsCount<-sum(str_detect(bitcoin1$text, "Bitcoins"))
cat("Number of tweets with 'Bitcoins':", BitcoinsCount, "\n")

bitcoinsCount<-sum(str_detect(bitcoin1$text, "bitcoins"))
cat("Number of tweets with 'bitcoins':", bitcoinsCount, "\n")

cryptoCount<-sum(str_detect(bitcoin1$text, "crypto"))
cat("Number of tweets with 'crypto':", cryptoCount, "\n")
```

#Pie Chart
```{r}
mentions <- c(42562, 80992, 28476, 781)
lbls <- c("bitcoin", "Bitcoin", "crypto", "Bitcoin(s)")
pie(mentions, labels = lbls,col=rainbow(length(lbls)), main="Mentions of Bitcoin(s) and crypto")
```

#Count Bitcoin(s) and bitcoin(s)
```{r}
BitcoinOrbitcoin<-sum(str_detect(bitcoin1$text,"bitcoin|Bitcoin|bitcoins|Bitcoins"))
cat("Number of tweets with 'bitcoin(s)' or Bitcoin(s):" , BitcoinOrbitcoin, "\n")
```

#Number of hashtags
```{r}
hashtags= sum(str_detect(bitcoin1$text,"#")) 
cat("Number of hashtags:",hashtags, "\n")

```
# Number of mentions
```{r}
mentions = sum(str_detect(bitcoin1$text,"@"))
cat("Number of mentions:",mentions)
```

#How many times was #Giveaway mentioned
```{r}
sum(str_detect(bitcoin1$text,"#Giveaway"))
print("Giveaway was mentionned 776 times")
```

# Corpus Analysis(Term Frequency)
```{r}
#You need to use Vector Source before using Corpus
tweetCorpus <- Corpus(VectorSource(bitcoin1$text))

#Term Document Matrix
tweetTDM <- TermDocumentMatrix(tweetCorpus)

inspect(tweetTDM)
```

#Document feature Matrix
```{r}
tweetDFM<-dfm(bitcoin1$text, remove_punct=TRUE, remove=stopwords("english"))
topfeatures(tweetDFM)
```

```{r}
tweetDFM<-dfm(tweetTDM$text, remove_punct=TRUE, remove=stopwords("english"))
tweetDFM <- as.matrix(head(tweetDFM, 5000))
```

```{r}
sent <- iconv(bitcoin1$text)
sentiments<- head(sent, 10000)

#Obtain sentiment scores
s <- get_nrc_sentiment(sentiments)
head(s)

```

```{r}
barplot(colSums(s),
        las = 2,
        col = rainbow(10),
        ylab = 'Count',
        main = 'Sentiment Scores Tweets')
```
###Classification Models (Naive Bayes, Decision Trees, Logistic Regression)

## Naive Bayes
```{r}
#Remove unnecessary columns 
bitcoin2 <- bitcoin1[-c(1,2,3,5,6,8,9,10,12,14,15,16,17,26,24)]
head(bitcoin2)

```

```{r}
# Test and Train the data
set.seed(123)
sample <- sample.split(bitcoin2$retweet_count, SplitRatio = .75)

train <- subset(bitcoin2, sample == TRUE)
test <- subset(bitcoin2, sample == FALSE)
```

```{r}
# Build the naiveBayes classifier
nb_model <- naiveBayes(retweet_count~., data = train)
```

```{r}
# Make prediction with testing set
nb_prediction <- predict(nb_model, test, type = "class")

# Confusion Matrix3
table(test$retweet_count, nb_prediction, dnn=c("Actual", "Prediction"))

# Output results
test$Prediction <- nb_prediction
```

```{r}
# Accuracy is the overall success rate of the model
# Extract  TP + TN 
tpTN <-  nrow(test)

# Get the size of the testing set (TP + TN + FP + FN)
testsize <- nrow(test)

# Calculate accuracy
accuracy <- tpTN/testsize
cat("Naive Bayes Classifier Accuracy:", accuracy)
```

```{r}
#LaPlace 1 
# Build the Naive Beyes classifier
laplace_model <- naiveBayes(retweet_count~., data = train, laplace = 1)
laplace_prediction <- predict(laplace_model, test, type = "class")

# Get TP + TF
laplace_results <- data_frame(Actual = test$retweet_count, Prediction = laplace_prediction)
accurateRows <- subset(laplace_results, Actual == Prediction)

# Calculate Accuracy
laplace_accuracy <-nrow(accurateRows) / nrow(test)
cat("LaPlace1 Accuracy:", laplace_accuracy)
```

```{r}
#LaPlace 3 
# Build the Naive Beyes classifier
laplace_model <- naiveBayes(retweet_count~., data = train, laplace = 3)
laplace_prediction <- predict(laplace_model, test, type = "class")

# Get TP + TF
laplace_results <- data_frame(Actual = test$retweet_count, Prediction = laplace_prediction)
accurateRows <- subset(laplace_results, Actual == Prediction)

# Calculate Accuracy
laplace_accuracy <-nrow(accurateRows) / nrow(test)
cat("LaPlace of 3 Accuracy:", laplace_accuracy)

```


## Decision Trees
# Build CTree
```{r}
head(bitcoin2)
```

```{r}
#Remove unnecessary columns 
bitcoin3 <- head(bitcoin2[-c(1,2,4,8)],10000)
head(bitcoin3)
```

```{r}
# Test and Train the data
set.seed(123)
sample <- sample.split(bitcoin3$verified, SplitRatio = .75)

train <- subset(bitcoin3, sample == TRUE)
test <- subset(bitcoin3, sample == FALSE)
```

```{r}
# Create the tree
ctreemodel <- ctree(retweet_count ~., data = train)
plot(ctreemodel)
```

```{r}
# Predict CTree
pred.ctree <- predict(ctreemodel, newdata = test, test = "response")

```

```{r}
## Confusion Matrix
pred.ctree <- predict(ctreemodel, newdata = test, test = "response")
ctree.Matrix <- table(test$retweet_count, pred.ctree, dnn = c("Actual", "Prediction"))
ctree.Matrix
```

```{r}
## Accuracy

accuracy <- sum(diag(ctree.Matrix) / sum(ctree.Matrix))
cat("The accuracy of the Decision tree is :",accuracy)
```

#Logistic regression

#Build Model

```{r}
#Remove unnecessary columns 
bitcoin4 <- head(bitcoin3[-c(2)],10000)
bitcoin4<-head(bitcoin4,10000)
```

```{r}
# Test and Train the data
set.seed(123)
sample <- sample.split(bitcoin4$followers_count, SplitRatio = .75)

train <- subset(bitcoin4, sample == TRUE)
test <- subset(bitcoin4, sample == FALSE)

```

```{r}
lgModel <- glm(verified ~.,data = train,family = binomial)
plot(lgModel)
```

# Make prediction
```{r}
Prediction <- predict(lgModel, newdata = test, test = "response")
Prediction
```

#Clustering
```{r}
# Set random Seed
set.seed(123)

#Extract Data for clustering
Data_Cluster<-data.frame(Number_of_retweets=bitcoin4$retweet_count , Number_of_friends=bitcoin4$friends_count)
head(Data_Cluster)

##Within sum of squares

# For each K, perform wss, store the value
wss<-numeric(50)
for(k in 1:50) {
  wss[k] <- sum(kmeans(Data_Cluster,k,nstart=25)$withinss)
}
wss

# Make a data frame out of the wss result 
wssresult1<-data.frame(k=c(1:50),wss=wss)
wssresult1

#visualize wss
ggplot(data=wssresult1, mapping=aes(x= k, y= wss))+
       geom_line()+
         geom_point()+
           labs(title = "K-Means: Number of rtweets and friends ", x="Number of clusters", y="Within sum of squares")
```

#1-Identify ideal k 
```{r}
Print<-"The ideal K would be 3"
Print
```

#2-Output ideal k’s WSS value
```{r}
Print<- "The ideal k's wss value is : 48633709843"
Print
```

#3-Display the number of members per cluster
```{r}
# Perform Kmeans with k set of 3

DataCluster<-kmeans(Data_Cluster, centers = 3, nstart = 25)
DataCluster
```

##3-For each data set, graph the ideal k’s clusters
```{r}
# Add the clusters assignment to each point

Data_Cluster$Cluster<-as.factor(DataCluster$cluster)

# Get centroids
centroids1<-as.data.frame(DataCluster$centers)
centroids1$Cluster<-as.factor(c(1:3))

```

```{r}
## Visualize cluster assignment

bit<- head(Data_Cluster,50)
ggplot(data = bit, mapping = aes(retweet_count, friends_count , color= blues9))+
  geom_point(data=centroids1, mapping = aes(x= retweet_count, y=friends_count, fill= red), size=5, shape=13) +
  labs(title= "Number of rtweets and friends", x="Number of retweets" , y= "Number of friends")
```
